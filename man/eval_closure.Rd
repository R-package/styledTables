% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funky.R
\name{eval_closure}
\alias{eval_closure}
\title{Eval code in closure without scoping problems (memory leaks)}
\usage{
eval_closure(
  expr,
  vars = NULL,
  lookup_env = parent.frame(),
  parent_env = .GlobalEnv
)
}
\arguments{
\item{expr}{The expression, which should be evaluated inside of the
closure.}

\item{vars}{An optional object, telling which variables should be
available inside the closure. It can either be
\itemize{
\item a \code{character} vector holding the names of the variables which should
looked up in the environment \code{lookup_env}.
\item a named \code{list}: In this case, the values are not looked up in
\code{lookup_env}, but directly taken from the list item values and the
list item names are used as variable names.
}}

\item{lookup_env}{The environment holding the variables for which the names
are defined in the  character vector \code{vars}.
If \code{vars} is a list or \code{NULL}, then \code{lookup_env} is not used.
The default for \code{lookup_env} is the environment where the function \code{fn}
was defined.}

\item{parent_env}{The parent environment (either an environment or a string
holding the name of an R package whoose namespace should be used as parent
environment), which should be assigned to
the closure. This argument is very important, since it
determines which objects will be available inside of your closure.
Usually one of the following two possibilities is the right choice for \code{parent_env}:
\itemize{
\item \code{parent_env = .GlobalEnv} (default): The \strong{global environment} is usually the right
choice for an expression, which does not use any non-exported functions
or any imported functions of any R package.
This is usually the case, when the closure is created outside
of any R package (e.g. not inside of a function that is part of an R package).
\item \code{parent_env = "MY_PKG"}: This is usually the right choice when you are
developing a new R package and want to create a closure
inside of another function of this package
(in this example the package name is \code{MY_PKG}).
This ensures that also non-exported functions and imported functions of
\code{MY_PKG} are available inside of your
closure as well as the \strong{global environment}.
}}
}
\description{
Evaluate an expression inside of closure that has an optimal scope.
This is very important, if your closure does return a function, since the
the entire environment tree (including the entire ancestry) is kept
in memory as long as your function is present. This is a common cause for
memory leaks.
With \code{eval_closure()} you can assign an environment that contains only
the needed variables (copies) and an optimal scope ancestry can be defined by
\code{parent_env}. Be sure, to choose the right environment for \code{parent_env}!
}
