% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/text_builder.R
\name{init_text_builder}
\alias{init_text_builder}
\title{Init a \code{text_builder} object, used for incrementally adding text parts}
\usage{
init_text_builder(sep = "\\n", indent = "\\t", before = NULL, after = NULL)
}
\arguments{
\item{sep}{A string, which will automatically be inserted between
two added text parts If you want to use no separator symbol at all, then
just set \code{sep = ""}.}

\item{indent}{A string, used as indentation symbol. This symbol will
automatically be inserted zero, one or multiple times in front of an
added text part, depending on the used \code{indent_level} (can be \verb{NULL, 0, 1, 2, ...})
when calling \code{add_line("SOME TEXT", indent_level = X)}.
If you do not want to use any indentation symbols, then just set
\code{indent = NULL}.}

\item{before}{A string, which will automatically be added right in front
of each text part.}

\item{after}{A string, which will automatically be added right after
each text part.}
}
\value{
A list object holding the function \code{add_text()} and \code{get_text()}
}
\description{
This function is very useful, when you want to incrementally add text
parts to a string.
The \code{text_builder} mechanism uses two separate text stacks in order to
store added text parts:
\itemize{
\item A \verb{downward stack}: For this stack all new text parts will be added below the
previously added text parts. With \code{add_text()} new text parts can be added
to this text stack.
\item An \verb{upward stack}: This stack uses the inverse direction, therefore
all new text parts will be added above the previously added text parts.
With \code{add_text_end()} new text parts can be added to the \verb{upward stack}.
When calling \code{create_text()} the \verb{downward stack} is concatenated above
the \verb{upward stack}.
}

The function \code{init_text_builder()} returns a list object holding the following functions
\itemize{
\item \code{add_text(text, indent_level = 0)}: This function adds a text part
to the text stack, holding all text parts you have added so far.
It takes two arguments:
\itemize{
\item \code{text}: A character vector holding the text parts you want to add.
\item \code{indent_level}: A non-negative integer, which defines how many times
you want to add the indentation string (defined in \code{indent}) in front
of the added text part.
}
\item \code{add_text_end(text, indent_level = 0)}: This function is similar to
\code{add_text()}, but adds the text part to the \verb{upward stack}.
It takes two arguments:
\itemize{
\item \code{text}: A character vector holding the text parts you want to add.
Be careful, although the \verb{upward stack} has reversed direction, the
string entries in the character vector \code{text} are not reversed.
This means that for \code{add_text_end(c("bla", "blub"))} the string
\code{"bla"} comes also in the finally builded text before \code{"blub"}.
\item \code{indent_level}: A non-negative integer, which defines how many times
you want to add the indentation string (defined in \code{indent}) in front
of the added text part.
}
\item \code{create_text()}: This function returns the constructed text.
}
}
